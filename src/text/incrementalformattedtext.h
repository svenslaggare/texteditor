#pragma once

#include "textformatter.h"

class Text;
class Font;
struct RenderStyle;
class RenderViewPort;

/**
 * Represents an incremental formatted text
 */
class IncrementalFormattedText : public BaseFormattedText {
public:
	/**
	 * The current input state
	 */
	struct InputState {
		std::size_t lineIndex;
		std::size_t charIndex;
	};
private:
	const Font& mFont;
	const RenderStyle& mRenderStyle;
	const RenderViewPort& mViewPort;

	FormatMode mFormatMode;
	TextFormatter mTextFormatter;

	Text& mText;
	std::size_t& mTextVersion;
	FormattedLines mFormattedLines;

	/**
	 * Finds the reformat search region for the given line
	 * @param lineIndex The line index
	 */
	std::pair<std::size_t, std::size_t> findReformatSearchRegion(std::size_t lineIndex);

	/**
	 * Reformats the given line index
	 * @param lineIndex The index of the line
	 */
	void reformatLine(std::size_t lineIndex);

	/**
	 * Reformats the given lines
	 * @param startLineIndex The index of the first line
	 * @param endLineIndex The index of the last line
	 */
	void reformatLines(std::size_t startLineIndex, std::size_t endLineIndex);

	/**
	 * Reformats for a character action
	 * @param inputState The input state
	 */
	void reformatCharacterAction(const InputState& inputState);
public:
	/**
	 * Creates a new incremental formatted text for the given text
	 * @param font The font
	 * @param renderStyle The render style
	 * @param viewPort The view port
	 * @param text The text
	 * @param textVersion The text version of the view
	 * @param formatMode The format mode
	 */
	explicit IncrementalFormattedText(const Font& font,
									  const RenderStyle& renderStyle,
									  const RenderViewPort& viewPort,
									  Text& text,
									  std::size_t& textVersion,
									  FormatMode formatMode);

	/**
	 * Returns the number of lines
	 */
	virtual std::size_t numLines() const override;

	/**
	 * Returns the formatting for the given line
	 * @param index The index
	 */
	virtual const FormattedLine& getLine(std::size_t index) const override;

	/**
	 * Creates a state machine
	 * @param formattedLines The formatted lines
	 */
	FormatterStateMachine createStateMachine(FormattedLines& formattedLines);

	/**
	 * Inserts the given character
	 * @param inputState The input state
	 */
	void insertCharacter(const InputState& inputState);

	/**
	 * Inserts a new line
	 * @param inputState The input state
	 */
	void insertLine(const InputState& inputState);

	/**
	 * Pastes from the clipboard
	 * @param inputState The input state
	 * @param numLines The number of lines pasted
	 */
	void paste(const InputState& inputState, std::size_t numLines);

	/**
	 * Deletes the current line
	 * @param inputState The input state
	 * @param mode How to delete the line
	 */
	void deleteLine(const InputState& inputState,Text::DeleteLineMode mode);

	/**
	 * Deletes the current selection
	 * @param inputState The input state
	 * @param textSelection The text selection
	 * @param deleteData Metadata generated by the deletion
	 */
	void deleteSelection(const InputState& inputState,
						 const TextSelection& textSelection,
						 const Text::DeleteSelectionData& deleteData);

	/**
	 * Deletes the given character
	 * @param inputState The input state
	 */
	void deleteCharacter(const InputState& inputState);
};